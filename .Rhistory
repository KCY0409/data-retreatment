if(!requireNamespace("nycflights13"))
if(!requireNamespace("nycflights13")) install.packages("nycflights13")
library(nycflights13)
nycflights13::flights
str(flights)
#dplyr 패키지
library(dplyr)
#열 방향 : 선택 - select()
select(flights,year,month,day)
#숫자에서만 제공하던 from:to 문법을 컬럼 순서를 기준으로 지원
select(flights, year:day)
# -(마이너스)는 지정한 컬럼을 제외하고 전부라는 의미
select(flights, -(year:day))
# everything() 같은 helper함수를 제공 -> 선언된 컬럼을 제외한 나머지 전부라는 의미
select(flights, time_hour, air_time, everything())
# ends_with()같이 글자의 일부에 해당하는 컬럼 전부를 가져오는 helper함수도 존재 정규표현식의 주요기능을 함수로 제공
# ?select로 확인
select(flights, year:day, ends_with("delay"), distance, air_time)
#열 방향 : 계산 - mutate()
mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
#열 방향 : 계산 - mutate()
View(mutate(flights,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
))
#열 방향 : 계산 - mutate()
#출력 편의를 위해 일부 데이터만 사용
flights_sml <- select(flights, year:day, ends_with("delay"), distance, air_time)
flights_sml
# 각 컬럼간의 계산으로 새로운 열을 만들 수 있음
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
# 컬럼을 지우거나 기존의 컬럼을 변경하는 것도 가능
mutate(flights_sml,
arr_delay = NULL,
air_time = air_time / 60
)
# transmute()는 계산한 컬럼만 있는 테이블을 생성
transmute(flights,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# group_by()와 함께 window function들이 유용하게 사용
flights_smlg <- group_by(flights_sml, month)
mutate(flights_smlg, rank = row_number(desc(arr_delay)))
# 행 방향 : 조건 - filter()
# filter()는 데이터 중 조건에 해당하는 일부 데이터만 필터해서 사용.
filter(flights, month == 1)
# & == and 조건을 추가할 때 사용
filter(flights, month == 1 & day == 1)
filter(flights, month == 1 and day == 1)
# | == or
filter(flights, month == 11 | month == 12 )
# %in%는 유용하게 사용하는 논리연산자로 왼쪽에 있는 벡터가 오른쪽 벡터의 데이터 중 어느 하나라도 맞으면 출력
=324*50
# %in%는 유용하게 사용하는 논리연산자로 왼쪽에 있는 벡터가 오른쪽 벡터의 데이터 중 어느 하나라도 맞으면 출력
324*50
# %in%는 유용하게 사용하는 논리연산자로 왼쪽에 있는 벡터가 오른쪽 벡터의 데이터 중 어느 하나라도 맞으면 출력
filter(flights, month %in% c(11,12))
# !는 local 데이터에서 결과를 반대로 뒤집는 역할
# 수학에서의 괄호와 같이 연산의 범위를 작성해 두는 것이 문제 발생 소지 감소
filter(flights, !(arr_delay > 120 | dep_delay > 120))
# 행 방향 : 추가 - bind_rows()
feb <- filter(flights, month == 2)
dec <- filter(flifhts, month == 12)
dim(feb); dim(dec)
dec <- filter(flights, month == 12)
dim(feb); dim(dec)
nrow(feb)+nrow(dec)
# bind_rows()는 컬럼 이름을 기준으로 같은 컬럼 킽에 데이터를 붙여서 묶어줌.
bind_rows(feb, dec)
# list()로 구분된 데이터도 묶어줌
bind_rows(list(feb, dec))
# split()은 첫번째 인자로 받은 데이터를 컬럼을 기준으로 list()로 분리해 줌.
flights_mon <- split(flights, flights$month)
summary(flights_mon)
# split()으로 분리된 12개의 list()자료도 잘 합쳐줌
nrow(flights)
bind_rows(flights_mon)
# 다른 종류의 데이터도 묶어줌, c()는 vector를 생성하고, data_frame은 data.frame을 생성
bind_rows(
c(a = 1, b = 2),
data_frame(a = 3:4,  b = 5:6),
c(a = 7, b = 8)
)
# 데이터를 묶을 때 데이터를 구분하는 컬럼 추가 가능
bind_rows(list(feb, dec), .id = "id")
# 데이터를 구분하는 컬럼에 대해 이름이 동작하는 방식
bind_rows(list(a = feb, b = dec), .id = "data")
# 같은 이름의 컬럼이 없을 때는 NA로 채우면서 동작함
bind_rows(data.frame(x = 1:3), data.frame(y = 1:4))
# 행 방향 : 정렬 - arrange()
# arrange()는 지정되는 컬럼 순으로 오름차순 정렬해주는 함수
arrange(flights, dep_delay)
# desc()는 내림차순 정렬로 방향을 바꾸는 helper 함수
arrange(flights, desc(month), dep_delay)
# 그룹 계산 : group_by() + summarise()
# summarise()는 여러 데이터를 요약해 특성을 파악하는 방식으로 동작하는 함수들을 적용할 때 사용
summarise(flights, mean = mean(dep_delay, na.rm = T), n = n())
# group_by()는 데이터에 지정한 컬럼별이라는 추가 조건을 지정하는 기능을 수행
flights_g <- group_by(flights, month)
flights_g
# group_by()에 의해 지정한 컬럼별 summarise()연산을 수행
summarise(flights_g, mean = mean(dep_delay, na.rm = T), n = n())
# 열 결합(Join) - left_join()
flights2 <- select(flights, year:day, hour, origin, dest, tailum, carrier)
#dplyr 패키지
library(dplyr)
# 열 결합(Join) - left_join()
flights2 <- select(flights, year:day, hour, origin, dest, tailum, carrier)
library(nycflights13)
# 열 결합(Join) - left_join()
flights2 <- select(flights, year:day, hour, origin, dest, tailum, carrier)
# 열 결합(Join) - left_join()
flights2 <- select(flights, year:day, hour, origin, dest, tailnum, carrier)
flights2
# left_join()은 왼쪽 데이터를 기준으로 하고, by로 지정된 컬럼이 같은 데이터임을 식별하는 key로 지정해
# 오른쪽 데이터를 왼쪽 데이터에 결합하는 함수
left_join(flights2, airlines, by = "carrier")
# left_join()은 왼쪽 데이터를 기준으로 하고, by로 지정된 컬럼이 같은 데이터임을 식별하는 key로 지정해
# 오른쪽 데이터를 왼쪽 데이터에 결합하는 함수
left_join(flights2, airlines, by = "carrier")
# left_join()은 왼쪽 데이터를 기준으로 하고, by로 지정된 컬럼이 같은 데이터임을 식별하는 key로 지정해
# 오른쪽 데이터를 왼쪽 데이터에 결합하는 함수
View(left_join(flights2, airlines, by = "carrier"))
View(flights2)
# muture(), match()등의 함수로 구현하려면 아래와 같음
mutate(flights2, name = airlines$name[match(carrier, airlines$carrier)])
# key 역할을 할 컬럼을 지정하지 않으면 양쪽 데이터에서 컬럼 이름이 같은 모든 컬럼을 key로 자동 지정
left_join(flights2, weather)
# key 역할을 할 컬럼을 지정하지 않으면 양쪽 데이터에서 컬럼 이름이 같은 모든 컬럼을 key로 자동 지정
View(left_join(flights2, weather))
# 여러 컬럼이 key로써 가능할 때 명시적인 지정이 있으면 작성된 컬럼만 key로 동작
left_join(flights2, planes, by="tailnum")
# 여러 컬럼이 key로써 가능할 때 명시적인 지정이 있으면 작성된 컬럼만 key로 동작
View(left_join(flights2, planes, by="tailnum"))
# 여러 컬럼이 key로 동작했을 때 데이터가 잘못 되는 예
left_join(flights2, planes)
# 컬럼 이름이 다를 때는 아래와 같은 문법을 사용
left_join(flights2, airports, c("dest" = "faa"))
# rename()을 이용해 맞추는 방법도 가능
left_join(flights2, rename(airports, dest = faa), by = "dest")
library(tidyverse)
# tidyverse 패키지
if(!requireNamespace("tidyverse")){
install.packages("tidyverse")
}
library(tidyverse)
# 함수를 연결하는 파이프 연산자 (%>%)
# 함수를 중첩해서 사용할 일이 점점 빈번해 짐
plot(diff(log(smaple(rnorm(10000,mean = 10, sd = 1),size 100, replace = FALSE))),col = "red", type = "l")
plot(diff(log(sample(rnorm(10000,mean=10,sd=1),size=100,replace=FALSE))),col="red",type="l")
# %>% 를 사용하면
# 1. 생각의 순서대로 함수를 작성 가능
# 2. 중간 변수 저장을 할 필요가 없음
# 3. 순서가 읽기 용이해 기억하기 좋음
rnorm(10000,mean=10,sd=1) %>%
sample(size=100,replace=FALSE) %>%
log %>%
diff %>%
plot(col = "red", type="l")
#flights 데이터에 파이프 연산자 사용 예시1
flights %>%
group_by(year, month , day) %>%
summarise(delay=mean(dep_delay, na.rm = TRUE))
#열 방향 : 선택 - select()
# 데이터에서 컬럼을 선택해 사용, 선언된 순서대로 컬럼을 결정
select(flights,year,month,day)
library(nycflights13)
#flights 데이터에 파이프 연산자 사용 예시1
flights %>%
group_by(year, month , day) %>%
summarise(delay=mean(dep_delay, na.rm = TRUE))
# group_by()는 filter()와도 함께 사용할 수 있음
popular_dests <- flights %>%
group_by(dest) %>%
filter(n() > 365)
popular_dests
# 사용할 데이터부터 순서대로 함수를 작성할 수 있는 장점
popular_dests %>%
filter(arr_delay > 0 ) %>%
mutate(prop_delay = arr_delay / sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
library(tidyverse)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# long form 예시
table2
# 한 컬럼에 두개의 의미를 지닌 데이터가 들어 있는 경우
table3
# wide form 의 예시 1
table4a
# wide form 의 예시 2
table4b
# wide to long - gather()
# gather(data, key = "컬럼 이름이 데이터로 들어갈 그 컬럼의 이름",
# value = "매트릭스로 펼쳐져 있는 데이터가 모이는 컬럼의 이름",
# "데이터로 들어갈 컬럼들을 지정") 의 형태로 작성
# "데이터로 들어갈 컬럼들을 지정"은 위치에 자유로움
table4a %>%
gather('1999', '2000'
, key = "year"
, value = "cases")
# long to wide - spread()
# spread(data, key = "컬럼에 위치할 데이터가 있는 컬럼"
# , value = "매트릭스 모양이로 펼쳐질 데이터가 있는 컬럼")으로 작성
table2 %>%
spread(key = type,
value = count)
# 하나의 컬럼을  나누기 - separate()
# 아래와 같이 여러 부호로 그 의미가 나뉘어져 있지만, 한 컬럼에 데이터가 있는 경우,
# 컬럼을 의미 단위로 분리하는 역할을 수행.
# into = c("나눠 질때 첫번째 컬럼 이름","나눠질 때 두번째 컬럼 이름")으로 새로 생성되는 컬럼의 이름을 지정 가능
table3 %>%
separate(rate
, into = c("cases", "population"))
# 간단한 형변환은 옵션으로 제공
table3 %>%
separate(rate
, into = c("cases",
"population")
)
table3 %>%
separate(rate,
into = c("cases"
,"population"
, convert = TRUE))
# 두 컬럼을합치기 - unite()
# paste0()와 비슷하게 합쳐주는 역할을 수행
table5 %>%
unite(new, century, year)
# 두 컬럼을합치기 - unite()
# paste0()와 비슷하게 합쳐주는 역할을 수행
table5 %>%
unite(new, century, year)
# sep 인자를 이용해 구분자로 사용할 문자열을 지정 가능
table5 %>%
unite(new, century, year, sep = "")
